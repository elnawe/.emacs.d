This is where I spend most of the time. I love customization and Emacs
bring me something like this to play. I use =spaceline= to customize my
mode-line, but I'm positive that in some future I will move back to
=powerline=.

*** Delight

This package allows me to rename the major/minor modes "lightes", so
they look more like a compact and descriptive string instead of the
awful name that they already have (I'm looking at you =js2-mode=).
*NOTE*: Since this package is installed as main dependency, this piece
of code is merely for configuration.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure nil
  :config
  (defadvice powerline-major-mode (around delight-powerline-major-mode activate)
    (let ((inhibit-mode-name-delight nil)) ad-do-it)))
#+END_SRC

*** Forecast

Not going outside too much but always know what is happening out there.

#+BEGIN_SRC emacs-lisp
(use-package forecast
  :after spaceline
  :config
  (setq forecast-rain-symbol "\xf043")
  (progn
    (run-at-time elnawe/start-time-seconds nil
                 (lambda ()
                   (forecast--load-data (lambda ()
                                          (forecast--make-buffer "*Weather Forecast*"))))))

  (run-at-time t elnawe/update-time-seconds (lambda ()
                                              (forecast-refresh))))
#+END_SRC

*** Icons

A fancy looking mode-line is fancy! *Note*: Weather icons
[[Define segments][here]]

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :init
  (defun elnawe::ati/get-icon (NAME)
    "Uses `NAME' to retrieve an icon from `ati/icons-alist'"
    (cdr
     (assoc NAME ati/icons-alist)))

  (if (not elnawe/icons-enabled)
      (setq ati/icons-alist '((clock . "time ")
                              (git . "git ")
                              (spotify . "listening ")
                              (twitter . "twitter ")
                              (web . "web ")))
    (setq ati/icons-alist '((clock . "\xf017 ")
                            (git . "\xe907 ")
                            (spotify . "\xf1bc")
                            (twitter . "\xf099 ")
                            (web . "\xf0c1 ")))))
#+END_SRC

*** Spaceline

**** Setup

First, download Spaceline if doesn't exist and override
=mode-line-format=.

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :init
  (require 'spaceline-config))
;;(setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))
#+END_SRC

**** Define segments

Useful macro to programatically put faces to my segments.

#+BEGIN_SRC emacs-lisp
(defmacro with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))
#+END_SRC

Better buffer-id without mouseover and highlighting. I use the spaceline
=highlight-face= for this segment.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment elnawe::buffer-id-segment
  (buffer-name))
#+END_SRC

The time in my spaceline is super-important because I mostly use Emacs
in fullscreen mode.

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment elnawe::time-segment
  (concat
   (with-face (elnawe::ati/get-icon 'clock) '(:foreground "#DCA3A3"))
   (format-time-string "%H:%M" (current-time))))
#+END_SRC

Weather in Emacs? Yes, you can do it with =forecast= which is a great
package. Check also my [[Forecast]] configuration.

#+BEGIN_SRC emacs-lisp
(setq elnawe/forecast-icons-colors '(("clear-day" "\xf185 " :foreground "#F0DFAF")
                                     ("clear-night" "\xf186 " :foreground "#6F6F6F")
                                     ("cloudy" "\xf0c2 " :foreground "#6F6F6F")
                                     ("fog" "\xf04d " :foreground "#6F6F6F")
                                     ("partly-cloudy-day" "\xf0c2 " :foreground "#D0BF8F")
                                     ("partly-cloudy-night" "\xf0c2 " :foreground "#6F6F6F")
                                     ("rain" "\xf043 " :foreground "#94BFF3")
                                     ("wind" "\xf1d9 " :foreground "#DCDCCC")))

(defun elnawe::forecast/get-metadata ()
  "Get a value from `elnawe/forecast-icons-colors' depending on
what `currently.icon' has (which is the same as current weather
outside)'"
  (assoc
   (forecast--assoca '(currently icon) forecast--data)
   elnawe/forecast-icons-colors))

(spaceline-define-segment elnawe::forecast-segment
  "Show the current temperature"
  (when (bound-and-true-p forecast--buffer)
    (propertize
     (concat
      (with-face
       (if elnawe/icons-enabled (car (cdr (elnawe::forecast/get-metadata))) (car (elnawe::forecast/get-metadata)))
       (cdr (cdr (elnawe::forecast/get-metadata))))
      " "
      (forecast--temperature-string)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(spaceline-define-segment elnawe::version-control-segment
  "Minimal version control information."
  (when (fboundp 'magit-get-current-branch)
    (concat
     (with-face (elnawe::ati/get-icon 'git) '(:foreground "#DFAF8F"))
     (magit-get-current-branch)
     (powerline-raw
      (when (buffer-file-name)
        (pcase (vc-state (buffer-file-name))
          (`up-to-date "")
          (`edited " *")))))))
#+END_SRC

**** Configuration

Setup the actual configuration

#+BEGIN_SRC emacs-lisp
(setq
 powerline-default-separator 'arrow
 powerline-height 25
 spaceline-highlight-face-func 'spaceline-highlight-face-modified
 spaceline-separator-dir-left '(left . left)
 spaceline-separator-dir-right '(right . right))

(spaceline-install
  '((elnawe::buffer-id-segment :face highlight-face)
    (major-mode)
    (line-column)
    (buffer-position))
  '((anzu :when active)
    (selection-info :when mark-active)
    (org-pomodoro)
    (elnawe::version-control-segment)
    (elnawe::forecast-segment)
    (elnawe::time-segment)
    (projectile-root :face highlight-face)))
#+END_SRC

**** Theme

And there's some theme configuration going on.

#+BEGIN_SRC emacs-lisp
(zenburn-with-color-variables
  (set-face-attribute 'mode-line nil
                      :background zenburn-bg-1
                      :box nil
                      :foreground zenburn-fg)
  (set-face-attribute 'powerline-active1 nil
                      :background zenburn-bg-1
                      :foreground zenburn-fg)
  (set-face-attribute 'powerline-active2 nil
                      :background zenburn-bg-05)
  (set-face-attribute 'mode-line-inactive nil
                      :background zenburn-bg-2
                      :box nil
                      :foreground zenburn-bg+3)
  (set-face-attribute 'powerline-inactive1 nil
                      :background zenburn-bg-2
                      :foreground zenburn-bg+3)
  (set-face-attribute 'powerline-inactive2 nil
                      :background zenburn-bg-1)
  (set-face-attribute 'spaceline-flycheck-error nil
                      :foreground zenburn-red)
  (set-face-attribute 'spaceline-flycheck-info nil
                      :foreground zenburn-blue+1)
  (set-face-attribute 'spaceline-flycheck-warning nil
                      :foreground zenburn-orange)
  (set-face-attribute 'spaceline-highlight-face nil
                      :background zenburn-yellow
                      :foreground zenburn-bg-1)
  (set-face-attribute 'spaceline-modified nil
                      :background zenburn-red-1
                      :foreground zenburn-bg-1)
  (set-face-attribute 'spaceline-read-only nil
                      :background zenburn-blue-1
                      :foreground zenburn-bg-1)
  (set-face-attribute 'spaceline-unmodified nil
                      :background zenburn-green-1
                      :foreground zenburn-bg-1))
#+END_SRC
